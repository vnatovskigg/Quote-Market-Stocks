export const getArticles = async (segment) => {
  const res = await fetch(`http://localhost:8888/api/articles/`);
  let data = await res.json();
  let found = data.find((article) => {
    return article.segment === segment;
  })
  return found;
};

export const checkForArticle = async (title) => {
  const res = await fetch(`http://localhost:8888/api/articles/`);
  const articles = await res.json();
  const foundArticle = articles.find((article) => {
    return article.title === title;
  });
  if (foundArticle) {
    return false;
  } else {
    return true;
  }
};

export  const fetchArticles = async (segment) => {
  const res = await fetch(`https://bloomberg-market-and-financial-news.p.rapidapi.com/news/list?id=${segment || 'latest'}`, {
    "method": "GET",
    "headers": {
      "x-rapidapi-key": "26b171259cmshcab3cc72d758417p1c9e3ajsn5b654972df21",
      "x-rapidapi-host": "bloomberg-market-and-financial-news.p.rapidapi.com"
    }
  })

  const data = await res.json();
  let modules = data.modules;
  modules = modules.filter((module) => module.stories.length > 0);

  modules.map( (module) => {

        module.stories.map( async (story) => {
          let { title, autoGeneratedSummary, byline, internalID, published, thumbnailImage, shortURL } = story;
          const check = await checkForArticle(title);

          if (check) {
              await fetch(`http://localhost:8888/api/articles/`, {
              method: "POST",
              body: JSON.stringify({
                title,
                content: autoGeneratedSummary,
                author: byline,
                publishedAt: published,
                url: shortURL,
                urlToImage: thumbnailImage,
                uid: internalID,
                segment
              }),
              headers: {
                "Content-Type": "application/json",
              },
            });
          }
        })
      }
    );
  return "Articles added to db";
};

