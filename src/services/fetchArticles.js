export const getArticles = async (segment) => {
  const res = await fetch(`http://localhost:8888/api/articles/`);
  let data = await res.json();
  let found = data.find((article) => {
    return article.segment === segment;
  })
  return found;
};

export const checkForArticle = async (title) => {
  const res = await fetch(`http://localhost:8888/api/articles/`);
  const articles = await res.json();
  const foundArticle = articles.find((article) => {
    return article.title === title;
  });
  if (foundArticle) {
    return false;
  } else {
    return true;
  }
};

export  const fetchArticles = async (segment) => {
  const res = await fetch(`https://bloomberg-market-and-financial-news.p.rapidapi.com/news/list?id=${segment || 'latest'}`, {
    "method": "GET",
    "headers": {
      "x-rapidapi-key": "26b171259cmshcab3cc72d758417p1c9e3ajsn5b654972df21",
      "x-rapidapi-host": "bloomberg-market-and-financial-news.p.rapidapi.com"
    }
  })
  const data = await res.json();
  let modules = data.modules.filter((module) => module.stories.length > 0);

  return modules;
};

export const depositData = (data, segment) => {
  let articleArr = data.filter((foo) => foo.stories.length > 0).forEach((module) => {
    
      module.stories.map( async (article) => {
        let { title, 
              autoGeneratedSummary, 
              byline, 
              internalID, 
              published, 
              thumbnailImage, 
              shortURL 
            } = article;
        const check = await checkForArticle(title);

        if (check) {

            fetch(`http://localhost:8888/api/articles/`, {
                  method: "POST",
                  body: JSON.stringify({
                    title,
                    summary: autoGeneratedSummary,
                    published: published,
                    author: byline,
                    url: shortURL,
                    thumbnail: thumbnailImage,
                    uid: internalID,
                    segment
                  }),
                  headers: {
                    "Content-Type": "application/json",
                  },
            })
            .then(returned => console.log(returned)) 
            .catch(err => console.log(err))
          }
      })
  })
}

